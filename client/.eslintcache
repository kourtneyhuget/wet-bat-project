[{"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/index.js":"1","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/App.js":"2","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/MainPage.jsx":"3","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/Header.jsx":"4","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/QuickQuote.jsx":"5","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/PendingQuotes.jsx":"6","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/CompletedQuotes.jsx":"7"},{"size":172,"mtime":1608140354125,"results":"8","hashOfConfig":"9"},{"size":300,"mtime":1608140265254,"results":"10","hashOfConfig":"9"},{"size":935,"mtime":1608254428050,"results":"11","hashOfConfig":"9"},{"size":6770,"mtime":1608227293472,"results":"12","hashOfConfig":"9"},{"size":9190,"mtime":1608254837115,"results":"13","hashOfConfig":"9"},{"size":4320,"mtime":1608254838025,"results":"14","hashOfConfig":"9"},{"size":1961,"mtime":1608254232684,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1f71uar",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/index.js",[],["32","33"],"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/App.js",[],"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/MainPage.jsx",[],"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/Header.jsx",[],"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/QuickQuote.jsx",[],"/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/PendingQuotes.jsx",["34","35"],"import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport { Button } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: \"40%\",\n    height: \"40%\",\n  },\n  container: {\n    maxHeight: 500,\n    maxWidth: \"50%\",\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#5BBFBA\",\n    },\n    secondary: {\n      main: \"#5F6CAF\",\n    },\n  },\n});\n\nexport function PendingQuotes(props) {\n  const classes = useStyles();\n  // const [open, setOpen] = useState(false);\n  const [selectedId, setSelectedId] = useState([]);\n  const [pending, setPending] = useState([]);\n\n  console.log(\"THIS IS PENDING\", pending);\n  const handleChange = (event) => {\n    setSelectedId(event.target.value);\n  };\n\n  //render all pending quotes\n  const getPending = async (event) => {\n    try {\n      const response = await fetch(\"/api/pending\");\n      const jsonData = await response.json();\n      setPending(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getPending();\n  }, [props.updatePending]);\n\n  // close the pending quote\n  const moveTask = async (quoteId) => {\n    axios\n      .put(`api/quotescompleted/${quoteId}`, {\n        selectedId: quoteId,\n      })\n      .then((res) => {\n        console.log(\"MADE IT TO THE BACKEND\");\n        props.updateCompletedQuotes();\n        setPending(pending.filter((quote) => quote.id !== quoteId));\n      })\n      .catch((error) => {\n        console.error(\"Error: \", error);\n      });\n  };\n\n  return (\n    <div className=\"pending-quote-container\">\n      <ThemeProvider theme={theme}>\n        <TableContainer className={classes.container} component={Paper}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead className={classes.root}>\n              <TableRow>\n                <TableCell>NAME</TableCell>\n                <TableCell></TableCell>\n                <TableCell>PHONE</TableCell>\n                <TableCell>FROM</TableCell>\n                <TableCell>DEPART</TableCell>\n                <TableCell>RETURN</TableCell>\n                <TableCell>PRICE</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {pending.map((quote, index) => (\n                <TableRow key={quote.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {quote.first_name}\n                  </TableCell>\n                  <TableCell>{quote.last_name}</TableCell>\n                  <TableCell>{quote.phone_number}</TableCell>\n                  <TableCell>{quote.departure_location}</TableCell>\n                  <TableCell>{quote.depart_date.slice(0, 10)}</TableCell>\n                  <TableCell>{quote.return_date.slice(0, 10)}</TableCell>\n                  <TableCell>${quote.price}</TableCell>\n                  <TableCell>\n                    <Button\n                      onClick={() => moveTask(quote.id)}\n                      onChange={handleChange}\n                      variant=\"contained\"\n                      size=\"large\"\n                      color=\"primary\"\n                      type=\"submit\"\n                    >\n                      CLOSE\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TableCell align=\"center\"></TableCell>\n                <TableCell align=\"center\" className=\"icons-style\"></TableCell>\n                <TableCell align=\"center\"></TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </ThemeProvider>\n    </div>\n  );\n}\n","/Users/kourtneyhuget/Projects/wet-bat-project/client/src/components/CompletedQuotes.jsx",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":13},{"ruleId":"41","severity":1,"message":"45","line":41,"column":10,"nodeType":"43","messageId":"44","endLine":41,"endColumn":20},{"ruleId":"41","severity":1,"message":"46","line":19,"column":9,"nodeType":"43","messageId":"44","endLine":19,"endColumn":16},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Axios' is defined but never used.","Identifier","unusedVar","'selectedId' is assigned a value but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]